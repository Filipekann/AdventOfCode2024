Part 1:
The computer appears to be trying to run a program, but its memory (your puzzle input) is corrupted

The instructions have been jumbled up!

The goal of the program is just to multiply some numbers

It does that with instructions like mul(X,Y)
X and Y are each 1-3 digit numbers


mul(44,46) multiplies 44 by 46 to get a result of 2024. 
Similarly, mul(123,4) would multiply 123 by 4.

there are also many invalid characters that should be ignored

Sequences like mul(4*, mul(6,9!, ?(12,34), or mul ( 2 , 4 ) do nothing

For example:

x mul(2,4) %&mul[3,7]!@^do_not_ mul(5,5) +mul(32,64]then( mul(11,8) mul(8,5) )

Only the four highlighted sections are real mul instructions. 
Adding up the result of each instruction produces 161 
(2*4 + 5*5 + 11*8 + 8*5)

Scan the corrupted memory for uncorrupted mul instructions. 
What do you get if you add up all of the results of the multiplications?

Part 2:

some of the conditional statements are also still intact

The do() instruction enables future mul instructions

The don't() instruction disables future mul instructions

Only the most recent do() or don't() instruction applies

At the beginning of the program, mul instructions are enabled.

For example:

xmul(2,4)&mul[3,7]!^don't()_mul(5,5)+mul(32,64](mul(11,8)undo()?mul(8,5))

This corrupted memory is similar to the example from before, 
but this time the mul(5,5) and mul(11,8) instructions are disabled 
because there is a don't() instruction before them.

